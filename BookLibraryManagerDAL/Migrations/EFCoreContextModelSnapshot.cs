// <auto-generated />
using System;
using BookLibraryManagerDAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookLibraryManagerDAL.Migrations
{
    [DbContext(typeof(EFCoreContext))]
    partial class EFCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.BookRevision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PagesCount")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("PublishingYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("BookRevisions");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.LibraryBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RevisionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LibraryBooks");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.Point", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.RentBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryBookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RentBooks");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookRevisionLibraryBook", b =>
                {
                    b.Property<Guid>("BookRevisionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryBooksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookRevisionsId", "LibraryBooksId");

                    b.HasIndex("LibraryBooksId");

                    b.ToTable("BookRevisionLibraryBook");
                });

            modelBuilder.Entity("LibraryBookRentBook", b =>
                {
                    b.Property<Guid>("LibraryBooksId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RentBooksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LibraryBooksId", "RentBooksId");

                    b.HasIndex("RentBooksId");

                    b.ToTable("LibraryBookRentBook");
                });

            modelBuilder.Entity("LibraryLibraryBook", b =>
                {
                    b.Property<Guid>("LibrariesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LibraryBooksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LibrariesId", "LibraryBooksId");

                    b.HasIndex("LibraryBooksId");

                    b.ToTable("LibraryLibraryBook");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.BookRevision", b =>
                {
                    b.HasOne("BookLibraryManagerDAL.Entities.Book", "Book")
                        .WithMany("BookRevisions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.Library", b =>
                {
                    b.HasOne("BookLibraryManagerDAL.Entities.City", "City")
                        .WithOne("Library")
                        .HasForeignKey("BookLibraryManagerDAL.Entities.Library", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibraryManagerDAL.Entities.Point", "Location")
                        .WithOne("Library")
                        .HasForeignKey("BookLibraryManagerDAL.Entities.Library", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.RentBook", b =>
                {
                    b.HasOne("BookLibraryManagerDAL.Entities.User", "User")
                        .WithMany("RentBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookRevisionLibraryBook", b =>
                {
                    b.HasOne("BookLibraryManagerDAL.Entities.BookRevision", null)
                        .WithMany()
                        .HasForeignKey("BookRevisionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibraryManagerDAL.Entities.LibraryBook", null)
                        .WithMany()
                        .HasForeignKey("LibraryBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryBookRentBook", b =>
                {
                    b.HasOne("BookLibraryManagerDAL.Entities.LibraryBook", null)
                        .WithMany()
                        .HasForeignKey("LibraryBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibraryManagerDAL.Entities.RentBook", null)
                        .WithMany()
                        .HasForeignKey("RentBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryLibraryBook", b =>
                {
                    b.HasOne("BookLibraryManagerDAL.Entities.Library", null)
                        .WithMany()
                        .HasForeignKey("LibrariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibraryManagerDAL.Entities.LibraryBook", null)
                        .WithMany()
                        .HasForeignKey("LibraryBooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.Book", b =>
                {
                    b.Navigation("BookRevisions");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.City", b =>
                {
                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.Point", b =>
                {
                    b.Navigation("Library");
                });

            modelBuilder.Entity("BookLibraryManagerDAL.Entities.User", b =>
                {
                    b.Navigation("RentBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
